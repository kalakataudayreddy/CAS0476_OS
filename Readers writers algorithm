#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define NUM_READERS 3
#define NUM_WRITERS 2

sem_t mutex, wrt;
int data = 0, readers = 0;

void *reader(void *id) {
    int readerID = (int)id;
    while (1) {
        sem_wait(&mutex);
        readers++;
        if (readers == 1) {
            sem_wait(&wrt);
        }
        sem_post(&mutex);
        
        // Reading the shared data
        printf("Reader %d is reading: %d\n", readerID, data);
        
        sem_wait(&mutex);
        readers--;
        if (readers == 0) {
            sem_post(&wrt);
        }
        sem_post(&mutex);
    }
}

void *writer(void *id) {
    int writerID = (int)id;
    while (1) {
        sem_wait(&wrt);
        
        // Writing to the shared data
        data++;
        printf("Writer %d is writing: %d\n", writerID, data);
        
        sem_post(&wrt);
    }
}

int main() {
    pthread_t reader_threads[NUM_READERS];
    pthread_t writer_threads[NUM_WRITERS];

    sem_init(&mutex, 0, 1);
    sem_init(&wrt, 0, 1);

    for (int i = 0; i < NUM_READERS; i++) {
        pthread_create(&reader_threads[i], NULL, reader, (void *)i);
    }

    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_create(&writer_threads[i], NULL, writer, (void *)i);
    }

    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(reader_threads[i], NULL);
    }

    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writer_threads[i], NULL);
    }

    sem_destroy(&mutex);
    sem_destroy(&wrt);

    return 0;
}
